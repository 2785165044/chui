{
  "__type__": "cc.EffectAsset",
  "_name": "stream_effect",
  "_objFlags": 0,
  "_native": "",
  "properties": null,
  "techniques": [
    {
      "passes": [
        {
          "blendState": {
            "targets": [
              {
                "blend": true
              }
            ]
          },
          "rasterizerState": {
            "cullMode": 0
          },
          "properties": {
            "texture": {
              "value": "white",
              "type": 29
            },
            "alphaThreshold": {
              "value": [
                0.5
              ],
              "type": 13
            },
            "lightColor": {
              "value": [
                1,
                0,
                0,
                1
              ],
              "inspector": {
                "type": "color",
                "tooltip": "发光颜色"
              },
              "type": 16
            },
            "lightAngle": {
              "value": [
                0.5
              ],
              "inspector": {
                "range": [
                  0,
                  1
                ],
                "tooltip": "斜率 y/x"
              },
              "type": 13
            },
            "width": {
              "value": [
                0.1
              ],
              "inspector": {
                "range": [
                  -1,
                  1
                ]
              },
              "type": 13
            },
            "v": {
              "value": [
                1
              ],
              "editor": {
                "tooltip": "流光速率"
              },
              "type": 13
            },
            "d": {
              "value": [
                6
              ],
              "editor": {
                "tooltip": "流光距离"
              },
              "type": 13
            }
          },
          "program": "stream_effect|vs|fs"
        }
      ]
    }
  ],
  "shaders": [
    {
      "hash": 3491045010,
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  in vec4 v_color;\n  #if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\nuniform Light {\n    vec4 lightColor;\n    float lightAngle;\n    float width;\n    float v;\n    float d;\n  };\n  void main () {\n    vec4 o = vec4(1, 1, 1, 1);\n    #if USE_TEXTURE\n    o *= texture(texture, v_uv0);\n      #if CC_USE_ALPHA_ATLAS_TEXTURE\n      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n      #endif\n    #endif\n    o *= v_color;\n    ALPHA_TEST(o);\n    gl_FragColor = o;\n    float a = (cc_time.x*v - float(int(cc_time.x*v))) * d;\n    float dis = abs((a - lightAngle*v_uv0.x-v_uv0.y)/sqrt(lightAngle*lightAngle+1.0));\n    float alpha = step(dis, width);\n    alpha *= step(0.01, o.a);\n    alpha *= 1.0 - (dis / width);\n    o = o * o.a + lightColor * alpha * lightColor.a;\n    if(gl_FragColor.a<0.2){\n      alpha *=gl_FragColor.a*gl_FragColor.a*0.1;\n    }\n    gl_FragColor = gl_FragColor * gl_FragColor.a +  lightColor*alpha;\n  }"
      },
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\n  varying vec4 v_color;\n  #if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\nuniform vec4 lightColor;\nuniform float lightAngle;\nuniform float width;\nuniform float v;\nuniform float d;\n  void main () {\n    vec4 o = vec4(1, 1, 1, 1);\n    #if USE_TEXTURE\n    o *= texture2D(texture, v_uv0);\n      #if CC_USE_ALPHA_ATLAS_TEXTURE\n      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n      #endif\n    #endif\n    o *= v_color;\n    ALPHA_TEST(o);\n    gl_FragColor = o;\n    float a = (cc_time.x*v - float(int(cc_time.x*v))) * d;\n    float dis = abs((a - lightAngle*v_uv0.x-v_uv0.y)/sqrt(lightAngle*lightAngle+1.0));\n    float alpha = step(dis, width);\n    alpha *= step(0.01, o.a);\n    alpha *= 1.0 - (dis / width);\n    o = o * o.a + lightColor * alpha * lightColor.a;\n    if(gl_FragColor.a<0.2){\n      alpha *=gl_FragColor.a*gl_FragColor.a*0.1;\n    }\n    gl_FragColor = gl_FragColor * gl_FragColor.a +  lightColor*alpha;\n  }"
      },
      "builtins": {
        "globals": {
          "blocks": [
            {
              "name": "CCGlobal",
              "defines": []
            }
          ],
          "samplers": []
        },
        "locals": {
          "blocks": [
            {
              "name": "CCLocal",
              "defines": []
            }
          ],
          "samplers": []
        }
      },
      "defines": [
        {
          "name": "USE_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_MODEL",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_ALPHA_TEST",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_ALPHA_ATLAS_TEXTURE",
          "type": "boolean",
          "defines": [
            "USE_TEXTURE"
          ]
        }
      ],
      "blocks": [
        {
          "name": "ALPHA_TEST",
          "members": [
            {
              "name": "alphaThreshold",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [
            "USE_ALPHA_TEST"
          ],
          "binding": 0
        },
        {
          "name": "Light",
          "members": [
            {
              "name": "lightColor",
              "type": 16,
              "count": 1
            },
            {
              "name": "lightAngle",
              "type": 13,
              "count": 1
            },
            {
              "name": "width",
              "type": 13,
              "count": 1
            },
            {
              "name": "v",
              "type": 13,
              "count": 1
            },
            {
              "name": "d",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [],
          "binding": 1
        }
      ],
      "samplers": [
        {
          "name": "texture",
          "type": 29,
          "count": 1,
          "defines": [
            "USE_TEXTURE"
          ],
          "binding": 30
        }
      ],
      "record": null,
      "name": "stream_effect|vs|fs"
    }
  ]
}