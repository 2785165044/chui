{"version":3,"sources":["assets\\Script\\Manager\\SoundManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { ConstValue } from \"../Data/ConstValue\";\r\nimport { GameManager } from \"./GameManager\";\r\n\r\nclass SoundManagerClass {\r\n    private static instance: SoundManagerClass = null;\r\n    public static getInstance(): SoundManagerClass {\r\n        if (this.instance === null) {\r\n            this.instance = new SoundManagerClass();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    /**存放纹理资源的map */\r\n    private audioClipMap: Map<string, cc.AudioClip> = new Map();\r\n    /**播放语音列表 */\r\n    private audioList: Map<string, number> = new Map();\r\n    /**播放音效列表 */\r\n    private effectList: Map<string, number> = new Map();\r\n    /**音频统一的引用计数 */\r\n    private referenceList: Map<string, number> = new Map();\r\n\r\n    /**加载resources里audios的音频资源*/\r\n    public preLoadResAudioClip(callback: (isCompleted: boolean) => void) {\r\n        let path = ConstValue.AUDIO_DIR;\r\n        cc.loader.loadResDir(path, cc.AudioClip, (error, audioClips: cc.AudioClip[]) => {\r\n            //错误处理\r\n            if (error) {\r\n                cc.error(error);\r\n                callback(false);\r\n                return;\r\n            }\r\n            // 获取完毕后装入 Map\r\n            audioClips.forEach((value) => {\r\n                cc.log('缓存完毕！value.name == ' + value.name);\r\n                this.audioClipMap.set(value.name, value);\r\n                this.referenceList.set(value.name, 0);\r\n            });\r\n            // 执行回调返回进度\r\n            callback(true);\r\n        });\r\n    }\r\n\r\n    /**缓存所有音频资源 */\r\n    public preLoadAllAudioClips(callback: (isCompleted: boolean) => void) {\r\n        let isCompletedLoadResAudio = false;\r\n        this.preLoadResAudioClip((isCompleted) => {\r\n            if (isCompleted) {\r\n                cc.log(\"缓存完毕！preLoadResAudioClip\");\r\n            }\r\n            isCompletedLoadResAudio = true;\r\n            if (isCompletedLoadResAudio) {\r\n                callback(true);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**单独缓存某一个音频 */\r\n    public preLoadAudioClip(clipName: string, callback: () => void) {\r\n        let path = ConstValue.AUDIO_DIR + clipName;\r\n        cc.loader.loadRes(path, cc.AudioClip, (err, audioClip: cc.AudioClip) => {\r\n            if (err) {\r\n                cc.error(err);\r\n                return;\r\n            }\r\n            this.audioClipMap.set(clipName, audioClip);\r\n            this.referenceList.set(clipName, 0);\r\n            cc.log('缓存完毕！audioClip.name == ' + audioClip.name);\r\n            callback();\r\n        });\r\n    }\r\n\r\n    // 获取音频资源\r\n    public getAudioClip(clipName: string): cc.AudioClip {\r\n        if (!this.audioClipMap.has(clipName)) {\r\n            cc.log(`未缓存的音频资源: ${clipName}`);\r\n            return null;\r\n        } else {\r\n            return this.audioClipMap.get(clipName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 播放语音\r\n     * @param clipName 语音clip文件\r\n     * @param loop 是否循环\r\n     * @param interrupt 是否打断其他语音\r\n     * @param isMutex 是否互斥（指音效和语音），默认false\r\n     * @param volume 音量（0.0~1.0）\r\n     * @param onFinishCallback 播放完成回调函数\r\n     */\r\n    public playAudio(\r\n        clipName: string | cc.AudioClip,\r\n        loop: boolean,\r\n        interrupt: boolean,\r\n        isMutex: boolean = false,\r\n        volume: number = 1,\r\n        onFinishCallback: Function = null\r\n    ) {\r\n        if (!clipName || GameManager.isMute || !GameManager.canPlayAudio) return;\r\n        interrupt && this.stopAllAudio();\r\n        isMutex && this.stopAllEffect();\r\n        let clip = null;\r\n        if (typeof clipName === 'string') {\r\n            clip = this.getAudioClip(clipName);\r\n            if (clip == null) {\r\n                this.preLoadAudioClip(clipName, () => {\r\n                    clip = this.audioClipMap.get(clipName);\r\n                    this.playAudio(clip, loop, interrupt, isMutex, volume, onFinishCallback);\r\n                });\r\n                return;\r\n            }\r\n        } else {\r\n            clip = clipName;\r\n        }\r\n\r\n        let id = cc.audioEngine.play(clip, loop, volume);\r\n        this.audioList.set(clip.name, id);\r\n        //播放引用计数+1\r\n        let referenceCount = this.referenceList.get(clip.name);\r\n        this.referenceList.set(clip.name, referenceCount++);\r\n        cc.audioEngine.setFinishCallback(id, () => {\r\n            //引用计数为0删除资源\r\n            let referenceCount = this.referenceList.get(clip.name);\r\n            if (referenceCount-- < 0) {\r\n                this.stopSoundByName(clip.name);\r\n            }\r\n            this.referenceList.set(clip.name, referenceCount < 0 ? 0 : referenceCount);\r\n            setTimeout(() => {\r\n                onFinishCallback && onFinishCallback();\r\n            }, 100);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 播放音效\r\n     * @param clipName 语音clip文件\r\n     * @param loop 是否循环\r\n     * @param interrupt 是否打断其他音效\r\n     * @param isMutex 是否互斥（指音效和语音），默认false\r\n     * @param volume 音量（0.0~1.0）\r\n     * @param onFinishCallback 播放完成回调函数\r\n     */\r\n    public playEffect(\r\n        clipName: string | cc.AudioClip,\r\n        loop: boolean,\r\n        interrupt: boolean,\r\n        isMutex: boolean = false,\r\n        volume: number = 1,\r\n        onFinishCallback: Function = null\r\n    ) {\r\n        if (!clipName || GameManager.isMute || !GameManager.canPlayAudio) return;\r\n        interrupt && this.stopAllEffect();\r\n        isMutex && this.stopAllAudio();\r\n        let clip = null;\r\n        if (typeof clipName === 'string') {\r\n            clip = this.getAudioClip(clipName);\r\n            if (clip == null) {\r\n                this.preLoadAudioClip(clipName, () => {\r\n                    clip = this.audioClipMap.get(clipName);\r\n                    this.playEffect(clip, loop, interrupt, isMutex, volume, onFinishCallback);\r\n                });\r\n                return;\r\n            }\r\n        } else {\r\n            clip = clipName;\r\n        }\r\n        let id = cc.audioEngine.playEffect(clip, loop);\r\n        cc.audioEngine.setVolume(id, volume)\r\n        this.effectList.set(clip.name, id);\r\n        //播放引用计数+1\r\n        let referenceCount = this.referenceList.get(clip.name);\r\n        this.referenceList.set(clip.name, referenceCount++);\r\n        cc.audioEngine.setFinishCallback(id, () => {\r\n            //引用计数为0删除资源\r\n            let referenceCount = this.referenceList.get(clip.name);\r\n            if (referenceCount-- < 0) {\r\n                this.stopSoundByName(clip.name);\r\n            }\r\n            this.referenceList.set(clip.name, referenceCount < 0 ? 0 : referenceCount);\r\n            setTimeout(() => {\r\n                onFinishCallback && onFinishCallback();\r\n            }, 100);\r\n        });;\r\n    }\r\n\r\n    /**停止所有语音播放 */\r\n    public stopAllAudio() {\r\n        this.audioList.forEach((value, index) => {\r\n            this.referenceList.set(index, 0);\r\n            for (let i = 0; i <= value; i++) {\r\n                cc.audioEngine.stop(i);\r\n            }\r\n        });\r\n        this.audioList = new Map();\r\n    }\r\n\r\n    /**停止所有音效播放 */\r\n    public stopAllEffect() {\r\n        this.effectList.forEach((value, index, arr) => {\r\n            this.referenceList.set(index, 0);\r\n            for (let i = 0; i <= value; i++) {\r\n                cc.audioEngine.stopEffect(i);\r\n            }\r\n        });\r\n        this.effectList = new Map();\r\n    }\r\n\r\n    /**停止所有语音和音效的播放 */\r\n    public stopAll() {\r\n        this.stopAllAudio();\r\n        this.stopAllEffect();\r\n        cc.audioEngine.stopAll();\r\n    }\r\n\r\n    /**通过名字停止播放指定的音频 */\r\n    public stopSoundByName(clipName: string) {\r\n        this.referenceList.set(clipName, 0);\r\n        let id = this.audioList.get(clipName);\r\n        if (id != null && id != -1) {\r\n            cc.audioEngine.stop(id);\r\n            this.audioList.delete(clipName);\r\n        }\r\n        id = this.effectList.get(clipName);\r\n        if (id != null && id != -1) {\r\n            cc.audioEngine.stop(id);\r\n            this.effectList.delete(clipName);\r\n        }\r\n    }\r\n\r\n    /**某个音效是否正在播放 */\r\n    public isPlaying(clipName: string): boolean {\r\n        let id = this.audioList.get(clipName);\r\n        if (id != null && id != -1) {\r\n            return true;\r\n        }\r\n        id = this.effectList.get(clipName);\r\n        if (id != null && id != -1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\n/**音频管理类 */\r\nexport const SoundManager = SoundManagerClass.getInstance();\r\n"]}