{
  "ver": "1.0.27",
  "uuid": "fe1683b5-7cfe-47b6-a0ba-864992620d12",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\n  varying vec4 v_color;\n  #if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\nuniform vec4 lightColor;\nuniform float lightAngle;\nuniform float width;\nuniform float v;\nuniform float d;\n  void main () {\n    vec4 o = vec4(1, 1, 1, 1);\n    #if USE_TEXTURE\n    o *= texture2D(texture, v_uv0);\n      #if CC_USE_ALPHA_ATLAS_TEXTURE\n      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n      #endif\n    #endif\n    o *= v_color;\n    ALPHA_TEST(o);\n    gl_FragColor = o;\n    float a = (cc_time.x*v - float(int(cc_time.x*v))) * d;\n    float dis = abs((a - lightAngle*v_uv0.x-v_uv0.y)/sqrt(lightAngle*lightAngle+1.0));\n    float alpha = step(dis, width);\n    alpha *= step(0.01, o.a);\n    alpha *= 1.0 - (dis / width);\n    o = o * o.a + lightColor * alpha * lightColor.a;\n    if(gl_FragColor.a<0.2){\n      alpha *=gl_FragColor.a*gl_FragColor.a*0.1;\n    }\n    gl_FragColor = gl_FragColor * gl_FragColor.a +  lightColor*alpha;\n  }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  in vec4 v_color;\n  #if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\nuniform Light {\n    vec4 lightColor;\n    float lightAngle;\n    float width;\n    float v;\n    float d;\n  };\n  void main () {\n    vec4 o = vec4(1, 1, 1, 1);\n    #if USE_TEXTURE\n    o *= texture(texture, v_uv0);\n      #if CC_USE_ALPHA_ATLAS_TEXTURE\n      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n      #endif\n    #endif\n    o *= v_color;\n    ALPHA_TEST(o);\n    gl_FragColor = o;\n    float a = (cc_time.x*v - float(int(cc_time.x*v))) * d;\n    float dis = abs((a - lightAngle*v_uv0.x-v_uv0.y)/sqrt(lightAngle*lightAngle+1.0));\n    float alpha = step(dis, width);\n    alpha *= step(0.01, o.a);\n    alpha *= 1.0 - (dis / width);\n    o = o * o.a + lightColor * alpha * lightColor.a;\n    if(gl_FragColor.a<0.2){\n      alpha *=gl_FragColor.a*gl_FragColor.a*0.1;\n    }\n    gl_FragColor = gl_FragColor * gl_FragColor.a +  lightColor*alpha;\n  }"
      }
    }
  ],
  "subMetas": {}
}