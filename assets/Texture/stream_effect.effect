// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        lightColor: { value: [1.0, 0.0, 0.0, 1.0],inspector: {type: color,tooltip: "发光颜色"} }
        lightAngle: { value: 0.5,inspector: {range: [0.0,1.0],tooltip: "斜率 y/x"} }
        width: { value: 0.1,inspector: {range: [-1.0,1.0]} }
        v: { value: 1.0,editor: {tooltip: "流光速率"}}
        d: { value: 6.0,editor: {tooltip: "流光距离"}}
}%

CCProgram vs %{
  precision highp float;
  #include <cc-global>
  #include <cc-local>
  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;
  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif
  void main () {
    vec4 pos = vec4(a_position, 1);
    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif
    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif
    v_color = a_color;

    gl_Position = pos;
  }
}%

CCProgram fs %{
  precision highp float;
  #include <alpha-test>
    #include <cc-global>
  in vec4 v_color;
  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

uniform Light {
    // 点光颜色
    vec4 lightColor;
    // 点光方向
    float lightAngle;
    // 点光半径
    float width;
    float v;
    float d;
  };
  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif
    o *= v_color;
    ALPHA_TEST(o);
    gl_FragColor = o;
    float a = (cc_time.x*v - float(int(cc_time.x*v))) * d;
    float dis = abs((a - lightAngle*v_uv0.x-v_uv0.y)/sqrt(lightAngle*lightAngle+1.0));
    float alpha = step(dis, width);
    alpha *= step(0.01, o.a);
    alpha *= 1.0 - (dis / width);
    o = o * o.a + lightColor * alpha * lightColor.a;
    if(gl_FragColor.a<0.2){
      alpha *=gl_FragColor.a*gl_FragColor.a*0.1;
    }
    gl_FragColor = gl_FragColor * gl_FragColor.a +  lightColor*alpha;
  }
}%